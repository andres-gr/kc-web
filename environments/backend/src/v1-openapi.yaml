openapi: 3.0.3

info:
  title: KC Web backend API
  description: Test project for API documentation and codegen
  version: 1.0.0
  contact:
    name: Andres Garcia
    email: andres-gr@users.noreply.github.com

servers:
  - url: http://localhost:4000/api/v1
    description: Testing v1 API

tags:
  - name: Projects
    description: Project management

  - name: Todos
    description: Todo management

  - name: Users
    description: User management

components:
  responses:
    NoItemFound:
      description: No item/s found for given ID
      content: 
        application/json:
          schema:
            $ref: '#/components/schemas/BaseErrorResponse'

    UnprocessableEntity:
      description: Incorrect or missing values
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BaseErrorResponse'

  parameters:
    paramsId:
      in: path
      name: id
      required: true
      description: Item ID value
      schema:
        type: string

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # - - - - - - - - - - - - - - - - - - - - - bodies start - - - - - - - - - - - - - - - - - - - - - - - # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

  requestBodies:
    TodoBody:
      description: Todo text content
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TodoContent'

    SignupBody:
      description: Signup body
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SignupContent'

    LoginBody:
      description: Login body
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LoginContent'

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # - - - - - - - - - - - - - - - - - - - - - bodies end - - - - - - - - - - - - - - - - - - - - - - - - # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # - - - - - - - - - - - - - - - - - - - - - schemas start - - - - - - - - - - - - - - - - - - - - - - - # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

  schemas:
    BaseResponse:
      type: string
      example: Response message

    BaseErrorResponse:
      type: object
      required:
        - message
      properties:
        errors:
          type: array
          items:
            type: object
            additionalProperties: true
        message:
          $ref: '#/components/schemas/BaseResponse'
        status:
          type: integer

    ID:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          description: Unique ID for the item
          example: 1847kjdsasdfk

    Project:
      type: object
      required:
        - id
        - company
        - author
      properties:
        id:
          type: string
          example: 37014kdjasf01
        company:
          type: string
          example: Funahus LLC
        author:
          type: string
          example: John Smiff

    GetProjectResponse:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/BaseResponse'
        project:
          $ref: '#/components/schemas/Project'

    Todo:
      type: object
      required:
        - id
        - text
      properties:
        id:
          type: string
          example: id_1234qwert
        text:
          type: string
          example: Todo text content

    TodoContent:
      type: object
      properties:
        text:
          type: string
          example: A new todo text content

    GetTodosResponse:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/BaseResponse'
        todos:
          type: array
          items:
            $ref: '#/components/schemas/Todo'

    PostTodoResponse:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/BaseResponse'
        todo:
          $ref: '#/components/schemas/Todo'

    PatchTodoResponse:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/BaseResponse'
        todo:
          $ref: '#/components/schemas/Todo'

    DeleteTodoResponse:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/BaseResponse'
        todo:
          $ref: '#/components/schemas/Todo'

    UserBody:
      type: object
      required:
        - email
        - image
        - name
        - places
      properties:
        email:
          type: string
          description: User email
          example: jon@smiff.com
        image:
          type: string
          description: Profile image url for the user
          example: http://image.stock.com/images/profile/1
        name:
          type: string
          example: John Smiff
        places:
          type: integer
          description: Number of places shared
          example: 3

    User:
      allOf:
        - $ref: '#/components/schemas/ID'
        - $ref: '#/components/schemas/UserBody'

    SignupContent:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string

    LoginContent:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
        password:
          type: string

    UserPasswords:
      type: object
      properties:
        userId:
          type: string
      additionalProperties: true
      description: Key value pairs of userId to hashed password

    GetUsersResponse:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/BaseResponse'
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'

    SignupResponse:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/BaseResponse'
        user:
          $ref: '#/components/schemas/User'

    LoginResponse:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/BaseResponse'
        user:
          $ref: '#/components/schemas/User'

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # - - - - - - - - - - - - - - - - - - - - - schemas end - - - - - - - - - - - - - - - - - - - - - - - - # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #


# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # - - - - - - - - - - - - - - - - - - - - - paths start - - - - - - - - - - - - - - - - - - - - - - - - # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

paths:
  /project:
    get:
      description: Get a random project info
      summary: Get a random project info
      tags:
        - Projects
      responses:
        200:
          description: A random project object
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/GetProjectResponse'

  /todos:
    get:
      description: Get all todos
      summary: Get all todos
      tags:
        - Todos
      responses:
        200:
          description: Returns all todos
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/GetTodosResponse'
    post:
      description: Submit a new todo
      summary: Submit a new todo
      tags:
        - Todos
      requestBody:
        $ref: '#/components/requestBodies/TodoBody'
      responses:
        201:
          description: Added a new todo successfully
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/PostTodoResponse'

  /todos/{id}:
    parameters:
      - $ref: '#/components/parameters/paramsId'
    patch:
      description: Update todo with selected ID
      summary: Update todo with selected ID
      tags:
        - Todos
      requestBody:
        $ref: '#/components/requestBodies/TodoBody'
      responses:
        200:
          description: Updated todo with selected ID successfully
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/PatchTodoResponse'
    delete:
      description: Delete todo with selected ID
      summary: Delete todo with selected ID
      tags:
        - Todos
      responses:
        200:
          description: Delete todo with selected ID successfully
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteTodoResponse'

  /users:
    get:
      description: Get list of users
      summary: Get list of users
      tags:
        - Users
      responses:
        200:
          description: Retrieved list of users successfully
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/GetUsersResponse'

  /signup:
    post:
      description: Send a signup request
      summary: Send a signup request
      tags:
        - Users
      requestBody:
        $ref: '#/components/requestBodies/SignupBody'
      responses:
        201:
          description: Signup was successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignupResponse'
        403:
          description: Email already in use
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntity'

  /login:
    post:
      description: Send a login request
      summary: Send a login request
      tags:
        - Users
      requestBody:
        $ref: '#/components/requestBodies/LoginBody'
      responses:
        200:
          description: Login was successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        401:
          description: Credentials incorrect
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # - - - - - - - - - - - - - - - - - - - - - paths end - - - - - - - - - - - - - - - - - - - - - - - - - # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
